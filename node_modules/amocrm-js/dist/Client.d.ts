import { IClientOptions } from "./interfaces/common";
import { EventEmitter } from "./common/EventEmitter";
import { IConnection } from './common/Connection';
import { IEnvironment } from "./common/Environment";
import { IClientRequest } from "./common/ClientRequest";
import { IAuth } from "./common/Auth";
import { IToken } from "./common/Token";
import { ILeadFactory } from "./api/factories/LeadFactory";
import { ILead } from "./api/activeRecords/Lead";
import { JSONObject } from "./types";
import { IClientConstructors, IResourceEntity, IResourceFactory } from "./interfaces/api";
import { IContact } from "./api/activeRecords/Contact";
import { IContactFactory } from "./api/factories/ContactFactory";
import { ICompanyFactory } from "./api/factories/CompanyFactory";
import { ICompany } from "./api/activeRecords/Company";
import { IFactoryConstructors } from "./api/factories";
import { IEntityConstructors } from "./api/activeRecords";
export declare type IClientEntity<T> = {
    new (attributes?: JSONObject): T;
};
export interface IClient {
    constructors: IClientConstructors;
    getRequest(): IClientRequest;
    getFactoryConstructors(): IFactoryConstructors;
    getEntityConstructors(): IEntityConstructors;
    assignEntity<T extends IResourceEntity<IResourceFactory<T>>>(factory: IResourceFactory<T>): IClientEntity<T>;
    readonly token: IToken;
    readonly environment: IEnvironment;
    readonly request: IClientRequest;
    readonly connection: IConnection;
    readonly auth: IAuth;
    Lead: IClientEntity<ILead>;
    Contact: IClientEntity<IContact>;
    Company: IClientEntity<ICompany>;
    leads: ILeadFactory;
    contacts: IContactFactory;
    companies: ICompanyFactory;
}
/**
 * Основной класс библиотеки
 * */
export declare class Client extends EventEmitter implements IClient {
    readonly token: IToken;
    readonly environment: IEnvironment;
    readonly request: IClientRequest;
    readonly connection: IConnection;
    readonly auth: IAuth;
    readonly Lead: IClientEntity<ILead>;
    readonly Contact: IClientEntity<IContact>;
    readonly Company: IClientEntity<ICompany>;
    readonly leads: ILeadFactory;
    readonly contacts: IContactFactory;
    readonly companies: ICompanyFactory;
    constructor(options: IClientOptions);
    get constructors(): {
        factories: IFactoryConstructors;
        entities: {
            Lead: import("./types").TConstructor<ILead>;
            Contact: import("./types").TConstructor<IContact>;
            Company: import("./types").TConstructor<ICompany>;
            Tag: import("./types").TConstructor<import("./api/activeRecords/Tag").ITag>;
        };
    };
    getRequest(): IClientRequest;
    getFactoryConstructors(): IFactoryConstructors;
    getEntityConstructors(): {
        Lead: import("./types").TConstructor<ILead>;
        Contact: import("./types").TConstructor<IContact>;
        Company: import("./types").TConstructor<ICompany>;
        Tag: import("./types").TConstructor<import("./api/activeRecords/Tag").ITag>;
    };
    /**
     * Привязывает конструктор сущностей
     * @param factory - фабрика сущностей
     * @returns функция конструктор для вызова new client[Entity]
     * */
    assignEntity<T extends IResourceEntity<IResourceFactory<T>>>(factory: IResourceFactory<T>): IClientEntity<T>;
}
