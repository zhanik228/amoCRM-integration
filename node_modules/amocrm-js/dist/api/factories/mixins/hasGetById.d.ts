import { TFactoryConstructor } from "../../../types";
import { IResourceEntity, IResourceFactory } from "../../../interfaces/api";
import { IRequestOptions } from "../../../interfaces/common";
export declare enum GetWith {
    CONTACTS = "contacts",
    COMPANIES = "companies",
    CATALOG_ELEMENTS = "catalog_elements",
    LOSS_REASON = "loss_reason"
}
export interface IHasGetByIdCriteria {
    with?: string[];
}
export interface IHasGetByIdFactory<T extends IResourceEntity<IResourceFactory<T>>> extends IResourceFactory<T> {
    getById(identity: number, criteria?: IHasGetByIdCriteria, options?: IRequestOptions): Promise<T | null>;
}
export declare const getRequestCriteria: (criteria?: IHasGetByIdCriteria | undefined) => {
    with: string;
} | undefined;
export declare function hasGetById<T extends IResourceEntity<IResourceFactory<T>>>(Base: TFactoryConstructor<T>): TFactoryConstructor<T>;
