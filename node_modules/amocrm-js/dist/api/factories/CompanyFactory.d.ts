/**
 * Фабрика для создания сделок {@link Company}
 * */
import ResourceFactory from "../ResourceFactory";
import { ICompany } from "../activeRecords/Company";
import { JSONObject } from "../../types";
import { IResourceFactory } from "../../interfaces/api";
import { IGetCriteria, IHasGetFactory } from "./mixins/hasGetByCriteria";
import { IHasGetByIdFactory } from "./mixins/hasGetById";
import { IHasCreateFactory } from "./mixins/hasCreate";
import { IHasUpdateFactory } from "./mixins/hasUpdate";
import { IHasTagsFactory } from "./mixins/hasTags";
export interface CompaniesGetCriteria extends IGetCriteria {
    filter?: string;
}
export interface CompaniesCreateCriteria {
    name?: string;
    price?: number;
    status_id?: number;
    pipeline_id?: number;
    created_by?: number;
    updated_by?: number;
    closed_at?: number;
    loss_reason_id?: number;
    responsible_user_id?: number;
    custom_fields_values?: JSONObject[] | null;
    _embedded?: JSONObject;
    request_id?: string;
}
export interface CompaniesUpdateCriteria extends CompaniesCreateCriteria {
    id: number;
}
export declare type ICompanyFactory = IHasGetFactory<ICompany> & IHasGetByIdFactory<ICompany> & IHasCreateFactory<ICompany> & IHasUpdateFactory<ICompany> & IResourceFactory<ICompany> & IHasTagsFactory<ICompany>;
/**
 * Фабрика управления компаниями
 * */
export declare class BaseCompanyFactory extends ResourceFactory<ICompany> {
    getEntityClass(): import("../../types").TConstructor<ICompany>;
    getBaseUrl(): string;
    getEmbeddedKey(): string;
}
export declare const CompanyFactory: any;
