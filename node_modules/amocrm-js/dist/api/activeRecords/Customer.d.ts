import { IEmbeddedEntity, IEntityAttributes, IResourceEntity } from "../../interfaces/api";
import { ICustomerFactory } from "../factories/CustomerFactory";
import { JSONObject, TConstructor } from "../../types";
import { IRequestOptions } from "../../interfaces/common";
import { IHasGetByIdCriteria } from "../factories/mixins/hasGetById";
import ResourceEntity from "../ResourceEntity";
import { IHasEmbeddedTags } from "./Tag";
export interface CustomerAttributes extends IEntityAttributes {
    name?: string;
    next_price?: number;
    next_date?: number;
    responsible_user_id?: number;
    periodicity?: number;
    created_by?: number;
    updated_by?: number;
    created_at?: number;
    updated_at?: number;
    custom_fields_values?: JSONObject[] | null;
    _embedded?: ICustomerEmbedded;
}
export declare type ICustomerEmbedded = IHasEmbeddedTags;
export interface IEmbeddedCustomer extends IEmbeddedEntity {
    id?: number;
}
export interface IHasEmbeddedCustomers {
    customers?: IEmbeddedCustomer[];
}
export interface ICustomer extends IResourceEntity<ICustomerFactory>, CustomerAttributes {
    create(options?: IRequestOptions): Promise<ICustomer>;
    update(options?: IRequestOptions): Promise<ICustomer>;
    save(options?: IRequestOptions): Promise<ICustomer>;
    fetch(criteria?: IHasGetByIdCriteria, options?: IRequestOptions): Promise<ICustomer>;
}
export declare class BaseCustomer extends ResourceEntity<ICustomerFactory> {
    name?: string;
    next_price?: number;
    next_date?: number;
    responsible_user_id?: number;
    periodicity?: number;
    created_by?: number;
    updated_by?: number;
    created_at?: number;
    updated_at?: number;
    custom_fields_values?: JSONObject[] | null;
    _embedded?: ICustomerEmbedded;
    getAttributes(): CustomerAttributes;
    setAttributes(attributes?: CustomerAttributes): void;
}
export declare const Customer: TConstructor<ICustomer>;
