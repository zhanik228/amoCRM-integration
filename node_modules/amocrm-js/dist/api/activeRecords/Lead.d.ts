/**
 * Сделка (сущность)
 */
import ResourceEntity from "../ResourceEntity";
import { JSONObject, TConstructor } from "../../types";
import { ILeadFactory } from "../factories/LeadFactory";
import { IEntityAttributes, IResourceEntity } from "../../interfaces/api";
import { hasSave, IHasSaveEntity } from "./mixins/hasSave";
import { hasFetch, IHasFetchEntity } from "./mixins/hasFetch";
import { IHasEmbeddedTags } from "./Tag";
import { IHasEmbeddedContacts } from "./Contact";
import { IHasEmbeddedCompanies } from "./Company";
import { IHasEmbeddedCatalogElements } from "./CatalogElement";
import { IHasEmbeddedTagsEntity } from "./mixins/embedded/hasEmbeddedTags";
import { IHasEmbeddedContactsEntity } from "./mixins/embedded/hasEmbeddedContacts";
import { IHasEmbeddedCompaniesEntity } from "./mixins/embedded/hasEmbeddedCompanies";
import { IHasEmbeddedCatalogElementsEntity } from "./mixins/embedded/hasEmbeddedCatalogElements";
import { IHasEmbeddedLossReasons } from "./LossReason";
import { IHasEmbeddedSource } from "./Source";
export interface LeadAttributes extends IEntityAttributes {
    id?: number;
    name?: string;
    price?: number;
    responsible_user_id?: number;
    group_id?: number;
    status_id?: number;
    pipeline_id?: number;
    loss_reason_id?: number;
    source_id?: number;
    created_by?: number;
    updated_by?: number;
    closed_at?: number;
    created_at?: number;
    updated_at?: number;
    closed_task_at?: number;
    is_deleted?: boolean;
    custom_fields_values?: JSONObject[] | null;
    score?: number | null;
    account_id?: number;
    is_price_modified_by_robot?: boolean;
    _embedded?: ILeadEmbedded;
}
export declare type ILeadHasEmbedded = IHasEmbeddedTagsEntity<ILeadFactory> & IHasEmbeddedContactsEntity<ILeadFactory> & IHasEmbeddedCompaniesEntity<ILeadFactory> & IHasEmbeddedCatalogElementsEntity<ILeadFactory>;
export declare type ILead = IResourceEntity<ILeadFactory> & LeadAttributes & IHasSaveEntity<ILeadFactory> & IHasFetchEntity<ILeadFactory> & ILeadHasEmbedded;
export declare type ILeadEmbedded = IHasEmbeddedTags & IHasEmbeddedContacts & IHasEmbeddedCompanies & IHasEmbeddedCatalogElements & IHasEmbeddedLossReasons & IHasEmbeddedSource;
/**
 * Сделка
 */
export declare class BaseLead extends ResourceEntity<ILeadFactory> {
    name?: string;
    price?: number;
    responsible_user_id?: number;
    group_id?: number;
    status_id?: number;
    pipeline_id?: number;
    loss_reason_id?: number;
    source_id?: number;
    created_by?: number;
    updated_by?: number;
    closed_at?: number;
    created_at?: number;
    closed_task_at?: number;
    is_deleted?: boolean;
    custom_fields_values?: JSONObject[] | null;
    score?: number | null;
    account_id?: number;
    is_price_modified_by_robot?: boolean;
    _embedded?: ILeadEmbedded;
    getAttributes(): LeadAttributes;
    setAttributes(attributes: LeadAttributes): void;
}
export declare const mixins: (typeof hasSave | typeof hasFetch)[];
export declare const embeddedMixins: ((<T extends import("../../interfaces/api").IResourceFactory<import("./mixins/embedded/hasEmbeddedTags").IRequiredEntity<T>>>(Base: TConstructor<import("./mixins/embedded/hasEmbeddedTags").IRequiredEntity<T>>) => TConstructor<IResourceEntity<T>>) | (<T_1 extends import("../../interfaces/api").IResourceFactory<import("./mixins/embedded/hasEmbeddedCatalogElements").IRequiredEntity<T_1>>>(Base: TConstructor<import("./mixins/embedded/hasEmbeddedCatalogElements").IRequiredEntity<T_1>>) => TConstructor<IResourceEntity<T_1>>) | (<T_2 extends import("../../interfaces/api").IResourceFactory<import("./mixins/embedded/hasEmbeddedContacts").IRequiredEntity<T_2>>>(Base: TConstructor<import("./mixins/embedded/hasEmbeddedContacts").IRequiredEntity<T_2>>) => TConstructor<IResourceEntity<T_2>>))[];
export declare const Lead: TConstructor<ILead>;
