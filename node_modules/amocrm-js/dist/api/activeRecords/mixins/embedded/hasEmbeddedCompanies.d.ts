import { IResourceEntity, IResourceEntityWithEmbedded, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor } from "../../../../types";
import { IEmbeddedCompany } from "../../Company";
import { IHasSaveEntity } from "../hasSave";
import { IEmbeddedEntityList, IQueryAttributes } from "../../common/EmbeddedEntityList";
export interface IHasEmbeddedCompaniesEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    embeddedCompanies: IEmbeddedEntityList<IEmbeddedCompany>;
}
export interface IHasEmbeddedTagsCompaniesOptions {
    attributes?: IQueryAttributes<IEmbeddedCompany>;
}
export declare type IRequiredEntity<T extends IResourceFactory<IResourceEntity<T>>> = IHasSaveEntity<T> & IResourceEntityWithEmbedded<T, IEmbeddedCompany>;
export declare function hasEmbeddedCompanies(options?: IHasEmbeddedTagsCompaniesOptions): <T extends IResourceFactory<IRequiredEntity<T>>>(Base: TConstructor<IRequiredEntity<T>>) => TConstructor<IResourceEntity<T>>;
