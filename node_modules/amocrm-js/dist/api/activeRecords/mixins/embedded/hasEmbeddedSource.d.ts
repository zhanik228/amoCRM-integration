import { IResourceEntity, IResourceEntityWithEmbedded, IResourceFactory } from "../../../../interfaces/api";
import { TConstructor } from "../../../../types";
import { IEmbeddedTag } from "../../Tag";
import { IHasSaveEntity } from "../hasSave";
import { ICriteriaItem } from "../../common/CriteriaBuilder";
export declare type IRequiredEntity<T extends IResourceFactory<IResourceEntity<T>>> = IHasSaveEntity<T> & IResourceEntityWithEmbedded<T, IEmbeddedTag>;
export declare function hasEmbeddedSource<T extends IResourceFactory<IRequiredEntity<T>>>(Base: TConstructor<IRequiredEntity<T>>): TConstructor<IResourceEntity<T>>;
export declare class EmbeddedSourceCriteriaItem<T extends IResourceFactory<IRequiredEntity<T>>> implements ICriteriaItem {
    protected entity: IRequiredEntity<T>;
    constructor(entity: IRequiredEntity<T>);
    getCreateCriteria(): object;
    getUpdateCriteria(): object;
}
