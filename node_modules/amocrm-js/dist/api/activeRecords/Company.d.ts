/**
 * Сделка (сущность)
 */
import ResourceEntity from "../ResourceEntity";
import { JSONObject, TConstructor } from "../../types";
import { ICompanyFactory } from "../factories/CompanyFactory";
import { IEntityAttributes, IResourceEntity } from "../../interfaces/api";
import { hasSave, IHasSaveEntity } from "./mixins/hasSave";
import { hasFetch, IHasFetchEntity } from "./mixins/hasFetch";
import { IHasCreateEntity } from "./mixins/hasCreate";
import { IHasUpdateEntity } from "./mixins/hasUpdate";
import { IHasEmbeddedTagsEntity } from "./mixins/embedded/hasEmbeddedTags";
import { IHasEmbeddedCustomersEntity } from "./mixins/embedded/hasEmbeddedCustomers";
import { IHasEmbeddedCatalogElementsEntity } from "./mixins/embedded/hasEmbeddedCatalogElements";
import { IHasEmbeddedContactsEntity } from "./mixins/embedded/hasEmbeddedContacts";
export interface CompanyAttributes extends IEntityAttributes {
    id?: number;
    name?: string;
    responsible_user_id?: number;
    group_id?: number;
    created_by?: number;
    updated_by?: number;
    created_at?: number;
    updated_at?: number;
    is_deleted?: boolean;
    closed_task_at?: number;
    custom_fields_values?: JSONObject[] | null;
    account_id?: number;
    _embedded?: ICompanyHasEmbedded;
}
export interface IEmbeddedCompany {
    id?: number;
}
export interface IHasEmbeddedCompanies {
    companies?: IEmbeddedCompany[];
}
export declare type ICompanyHasEmbedded = IHasEmbeddedTagsEntity<ICompanyFactory> & IHasEmbeddedContactsEntity<ICompanyFactory> & IHasEmbeddedCustomersEntity<ICompanyFactory> & IHasEmbeddedCatalogElementsEntity<ICompanyFactory>;
export declare type ICompany = IResourceEntity<ICompanyFactory> & CompanyAttributes & IHasCreateEntity<ICompanyFactory> & IHasUpdateEntity<ICompanyFactory> & IHasSaveEntity<ICompanyFactory> & IHasFetchEntity<ICompanyFactory> & ICompanyHasEmbedded;
/**
 * Сделка
 */
export declare class BaseCompany extends ResourceEntity<ICompanyFactory> {
    name?: string;
    price?: number;
    responsible_user_id?: number;
    group_id?: number;
    status_id?: number;
    pipeline_id?: number;
    loss_reason_id?: number;
    source_id?: number;
    created_by?: number;
    updated_by?: number;
    closed_at?: number;
    created_at?: number;
    closed_task_at?: number;
    is_deleted?: boolean;
    custom_fields_values?: JSONObject[] | null;
    score?: number | null;
    account_id?: number;
    is_price_modified_by_robot?: boolean;
    _embedded?: ICompanyHasEmbedded;
    getAttributes(): CompanyAttributes;
    setAttributes(attributes?: CompanyAttributes): void;
}
export declare const mixins: (typeof hasSave | typeof hasFetch)[];
export declare const embeddedMixins: ((<T extends import("../../interfaces/api").IResourceFactory<import("./mixins/embedded/hasEmbeddedTags").IRequiredEntity<T>>>(Base: TConstructor<import("./mixins/embedded/hasEmbeddedTags").IRequiredEntity<T>>) => TConstructor<IResourceEntity<T>>) | (<T_1 extends import("../../interfaces/api").IResourceFactory<import("./mixins/embedded/hasEmbeddedCatalogElements").IRequiredEntity<T_1>>>(Base: TConstructor<import("./mixins/embedded/hasEmbeddedCatalogElements").IRequiredEntity<T_1>>) => TConstructor<IResourceEntity<T_1>>) | (<T_2 extends import("../../interfaces/api").IResourceFactory<import("./mixins/embedded/hasEmbeddedContacts").IRequiredEntity<T_2>>>(Base: TConstructor<import("./mixins/embedded/hasEmbeddedContacts").IRequiredEntity<T_2>>) => TConstructor<IResourceEntity<T_2>>))[];
export declare const Company: TConstructor<ICompany>;
