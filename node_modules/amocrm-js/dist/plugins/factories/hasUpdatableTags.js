"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.hasUpdatableTags = void 0;
const tslib_1 = require("tslib");
const hasUpdatableTags_1 = require("../entities/hasUpdatableTags");
const util_1 = require("../../util");
function hasUpdatableTags(Base) {
    return class HasUpdatableTags extends Base {
        getEntityClass() {
            return (0, util_1.applyMixins)(super.getEntityClass(), [hasUpdatableTags_1.hasUpdatableTags]);
        }
        get tagList() {
            if (this._updatableTagList) {
                return this._updatableTagList;
            }
            const tagList = Object.assign(Object.assign({}, super.tagList), { setFor: this.setTagsFor.bind(this), clearFor: this.clearTagsFor.bind(this), set: this.setTags.bind(this) });
            this._updatableTagList = tagList;
            return tagList;
        }
        setTagsFor(criteria, tagsCriteria, options) {
            const tags = tagsCriteria && this.getEntityCriteria(tagsCriteria);
            const tagsRequestCriteria = this.getEntityCriteria(criteria)
                .map((attributes) => {
                return {
                    id: attributes.id,
                    _embedded: {
                        tags
                    }
                };
            });
            return this.update(tagsRequestCriteria, options);
        }
        clearTagsFor(criteria, options) {
            return this.setTagsFor(criteria, null, options);
        }
        setTags(criteria, options) {
            return tslib_1.__awaiter(this, void 0, void 0, function* () {
                const url = this.getUrl();
                const tags = criteria && this.getEntityCriteria(criteria);
                const request = this.getRequest();
                const requestCriteria = {
                    _embedded: {
                        tags
                    }
                };
                console.log({
                    url,
                    requestCriteria
                });
                const { data } = yield request.patch(url, requestCriteria, options);
                return data;
            });
        }
    };
}
exports.hasUpdatableTags = hasUpdatableTags;
//# sourceMappingURL=hasUpdatableTags.js.map