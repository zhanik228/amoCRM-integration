import { IEntityAttributes, IResourceEntity, IResourceFactory, ISelfResponse } from "../../interfaces/api";
import { TConstructor } from "../../types";
import { IHasTagsFactory, IFactoryTagList } from "../../api/factories/mixins/hasTags";
import { IHasUpdateFactory } from "../../api/factories/mixins/hasUpdate";
import { IRequestOptions } from "../../interfaces/common";
import { ITag, TagAttributes } from "../../api/activeRecords/Tag";
export declare type THasUpdateAndTagsFactory<T extends IResourceEntity<IHasTagsFactory<T>>> = IHasTagsFactory<T> & IHasUpdateFactory<T>;
export interface IFactoryHasUpdatableTagList<T extends IResourceEntity<IHasTagsFactory<T>>> extends IFactoryTagList {
    setFor(criteria: (object | T)[], tagsCriteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<T[]>;
    clearFor(criteria: (object | T)[], options?: IRequestOptions): Promise<T[]>;
    set(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<ISelfResponse>;
}
export interface IHasUpdatableTagsFactory<T extends IResourceEntity<IHasTagsFactory<T>>> extends IHasTagsFactory<T> {
    tagList: IFactoryHasUpdatableTagList<T>;
    setTags(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<ISelfResponse>;
    setTagsFor(criteria: (object | T)[], tagsCriteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<T[]>;
    clearTagsFor(criteria: (object | T)[], options?: IRequestOptions): Promise<T[]>;
}
export interface IHasUpdatableTagsEntity<T extends IResourceFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    setTagsFor(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<IHasUpdatableTagsEntity<T>[]>;
    removeTagsFor(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<IHasUpdatableTagsEntity<T>[]>;
}
export declare function hasUpdatableTags<T extends IResourceEntity<IHasTagsFactory<T>>>(Base: TConstructor<THasUpdateAndTagsFactory<T>>): {
    new (...args: any[]): {
        _updatableTagList?: IFactoryHasUpdatableTagList<T> | undefined;
        getEntityClass(): any;
        readonly tagList: IFactoryHasUpdatableTagList<T>;
        setTagsFor(criteria: (object | T)[], tagsCriteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions | undefined): Promise<T[]>;
        clearTagsFor(criteria: (object | T)[], options?: IRequestOptions | undefined): Promise<T[]>;
        setTags(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions | undefined): Promise<ISelfResponse>;
        getTags(criteria?: import("../../api/factories/mixins/hasTags").IGetTagsCriteria | undefined, options?: IRequestOptions | undefined): Promise<import("../../api/ResourcePagination").IResourcePagination<ITag>>;
        createTags(criteria: (ITag | import("../../api/factories/TagFactory").TagCreateCriteria)[], options?: IRequestOptions | undefined): Promise<ITag[]>;
        getClient(): import("../../Client").IClient;
        createEntity(): T;
        from(attributes?: IEntityAttributes | undefined): T;
        getRequest(): import("../../common/ClientRequest").IClientRequest;
        getEmbeddedKey(): string;
        getEmbedded<A extends IEntityAttributes>(data: import("../../interfaces/api").ICollectionResponse<A>): A[];
        getUrl(path?: string | undefined): string;
        getEntityCriteria(criteriaData: object[]): IEntityAttributes[];
        getEntityCriteria<R>(criteriaData: object[]): R[];
        until(eventName: string | symbol): Promise<import("../../common/EventEmitter").IEventEmitter>;
        subscribe(subscriber: import("../../common/EventEmitter").IEventEmitter): import("../../common/EventEmitter").IEventEmitter;
        unsubscribe(subscriber: import("../../common/EventEmitter").IEventEmitter): import("../../common/EventEmitter").IEventEmitter;
        emit(eventName: string | symbol, ...args: unknown[]): boolean;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
        update(criteria: (object | T)[], options?: IRequestOptions | undefined): Promise<T[]>;
    };
};
