import { IHasUpdatableTagsFactory } from "./factories/hasUpdatableTags";
import { IClientConstructors } from "../interfaces/api";
import { TConstructor } from "../types";
import { ILeadFactory } from "../api/factories/LeadFactory";
import { IContactFactory } from "../api/factories/ContactFactory";
import { ILead } from "../api/activeRecords/Lead";
import { IContact } from "../api/activeRecords/Contact";
import { IFactoryConstructors } from "../api/factories";
import { IClient } from "../Client";
import { IClientOptions } from "../interfaces/common";
export declare type ITaggedLeadFactory = ILeadFactory & IHasUpdatableTagsFactory<ILead>;
export declare type ITaggedContactFactory = IContactFactory & IHasUpdatableTagsFactory<IContact>;
export interface ITaggedFactoryConstructors extends IFactoryConstructors {
    leads: TConstructor<ITaggedLeadFactory>;
    contacts: TConstructor<ITaggedContactFactory>;
}
export interface ITaggedClientConstructors extends IClientConstructors {
    factories: ITaggedFactoryConstructors;
}
export declare function getTaggedConstructors(constructors: IClientConstructors): ITaggedClientConstructors;
export interface ITaggedClient extends IClient {
    leads: ITaggedLeadFactory;
}
export declare function hasUpdatableTags(Base: TConstructor<IClient>): {
    new (options: IClientOptions): {
        readonly leads: ITaggedLeadFactory;
        readonly contacts: ITaggedContactFactory;
        readonly constructors: ITaggedClientConstructors;
        getRequest(): import("../common/ClientRequest").IClientRequest;
        getFactoryConstructors(): IFactoryConstructors;
        getEntityConstructors(): import("../api/activeRecords").IEntityConstructors;
        assignEntity<T extends import("../interfaces/api").IResourceEntity<import("../interfaces/api").IResourceFactory<T>>>(factory: import("../interfaces/api").IResourceFactory<T>): import("../Client").IClientEntity<T>;
        readonly token: import("../common/Token").IToken;
        readonly environment: import("../common/Environment").IEnvironment;
        readonly request: import("../common/ClientRequest").IClientRequest;
        readonly connection: import("../common/Connection").IConnection;
        readonly auth: import("../common/Auth").IAuth;
        Lead: import("../Client").IClientEntity<ILead>;
        Contact: import("../Client").IClientEntity<IContact>;
        Company: import("../Client").IClientEntity<import("../api/activeRecords/Company").ICompany>;
        companies: import("../api/factories/CompanyFactory").ICompanyFactory;
    };
};
