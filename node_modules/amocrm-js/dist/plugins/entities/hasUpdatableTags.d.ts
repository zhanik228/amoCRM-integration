import { IResourceEntity } from "../../interfaces/api";
import { TConstructor } from "../../types";
import { ITag, TagAttributes } from "../../api/activeRecords/Tag";
import { IRequestOptions } from "../../interfaces/common";
import { IHasUpdatableTagsFactory } from "../factories/hasUpdatableTags";
export interface IEntityHasUpdatableTagList<T extends IHasUpdatableTagsFactory<IResourceEntity<T>>> {
    update(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<IResourceEntity<T>[]>;
    clear(options?: IRequestOptions): Promise<IResourceEntity<T>[]>;
}
export interface IEntityHasUpdatableTags<T extends IHasUpdatableTagsFactory<IResourceEntity<T>>> extends IResourceEntity<T> {
    get tagsList(): IEntityHasUpdatableTagList<T>;
    updateTags(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions): Promise<IResourceEntity<T>[]>;
    clearTags(options?: IRequestOptions): Promise<IResourceEntity<T>[]>;
}
export declare function hasUpdatableTags<T extends IHasUpdatableTagsFactory<IResourceEntity<T>>>(constructor: TConstructor<IResourceEntity<T>>): {
    new (...args: any[]): {
        _tagList?: IEntityHasUpdatableTagList<T> | undefined;
        readonly tagList: IEntityHasUpdatableTagList<T>;
        updateTags(criteria: (TagAttributes | ITag)[] | null, options?: IRequestOptions | undefined): Promise<IResourceEntity<T>[]>;
        clearTags(options?: IRequestOptions | undefined): Promise<IResourceEntity<T>[]>;
        id?: number | undefined;
        updated_at?: number | undefined;
        criteriaBuilder: import("../../api/activeRecords/common/CriteriaBuilder").ICriteriaBuilder;
        isNew(): boolean;
        getFactory(): T;
        getAttributes(): import("../../interfaces/api").IEntityAttributes;
        setAttributes(attributes?: import("../../interfaces/api").IEntityAttributes | undefined): void;
        until(eventName: string | symbol): Promise<import("../../common/EventEmitter").IEventEmitter>;
        subscribe(subscriber: import("../../common/EventEmitter").IEventEmitter): import("../../common/EventEmitter").IEventEmitter;
        unsubscribe(subscriber: import("../../common/EventEmitter").IEventEmitter): import("../../common/EventEmitter").IEventEmitter;
        emit(eventName: string | symbol, ...args: unknown[]): boolean;
        addListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        on(eventName: string | symbol, listener: (...args: any[]) => void): any;
        once(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        off(eventName: string | symbol, listener: (...args: any[]) => void): any;
        removeAllListeners(event?: string | symbol | undefined): any;
        setMaxListeners(n: number): any;
        getMaxListeners(): number;
        listeners(eventName: string | symbol): Function[];
        rawListeners(eventName: string | symbol): Function[];
        listenerCount(eventName: string | symbol): number;
        prependListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        prependOnceListener(eventName: string | symbol, listener: (...args: any[]) => void): any;
        eventNames(): (string | symbol)[];
    };
};
